// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 14.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Baku.LibqiDotNet.ServiceCodeGenerator
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class QiServiceTemplate : QiServiceTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;

//NOTE: This Source was automatically generated using ""Baku.LibqiDotNet.ServiceCodeGenerator"" project.

namespace Baku.LibqiDotNet.Service
{
    /// <summary>");
            
            #line 12 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceDescription));
            
            #line default
            #line hidden
            this.Write("</summary>\r\n    public class ");
            
            #line 13 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\tinternal ");
            
            #line 15 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write("(IQiSession session)\r\n\t\t{\r\n\t\t\tSession = session;\r\n\t\t}\r\n\r\n        /// <summary>サービ" +
                    "スの取得元セッションを指定してサービスを取得します。</summary>\r\n        /// <param name=\"session\">サービスの取得元" +
                    "となるセッション</param>\r\n\t\tpublic static ");
            
            #line 22 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write(" CreateService(IQiSession session)\r\n\t\t{\r\n\t\t\tvar result = new ");
            
            #line 24 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write("(session);\r\n\t\t\tresult.InitializeService();\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n        ///" +
                    " <summary>\r\n\t\t/// 内部情報が未初期化のサービスを取得します。初期化は<see ref=\"StartInitialize\"/>関数で行います。\r" +
                    "\n\t\t///</summary>\r\n        /// <param name=\"session\">サービスの取得元となるセッション</param>\r\n\t\t" +
                    "public static ");
            
            #line 33 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write(" CreateUninitializedService(IQiSession session)\r\n\t\t{\r\n\t\t\treturn new ");
            
            #line 35 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write("(session);\r\n\t\t}\r\n\r\n\t\t/// <summary>同期的にネットワーク経由でサービス情報を取得し、初期化します。</summary>\r\n\t\tpu" +
                    "blic void InitializeService()\r\n\t\t{\r\n\t\t\tif (!IsInitialized)\r\n\t\t\t{\r\n\t\t\t    SourceS" +
                    "ervice = Session.GetService(\"");
            
            #line 43 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServiceName));
            
            #line default
            #line hidden
            this.Write(@""");
			}
		}

		/// <summary>
		/// ネットワーク経由でサービス情報を取得し、初期化する処理を非同期的に開始します。
		/// 初期化の完了は<see ref=""IsInitialized""/>プロパティあるいは<see ref=""Initialized""/>イベントを通じて行います。
		///</summary>
		public void StartInitializeService()
		{
			if (!IsInitialized)
			{
				new Thread(this.InitializeService).Start();
			}
		}

		private readonly object _sourceServiceLock = new object();
		private IQiObject _sourceService;

        /// <summary>コード生成によってラップされる前のサービスを表すオブジェクトを取得します。</summary>
        public IQiObject SourceService 
		{ 
			get { lock (_sourceServiceLock) { return _sourceService; } }
			private set 
			{ 
				lock (_sourceServiceLock) 
				{ 
					_sourceService = value; 
				}
				if (value != null)
				{
					IsInitialized = true;
					Initialized?.Invoke(this, EventArgs.Empty);
				}
			}
		}

		/// <summary>このサービスに関連付けられたセッション情報を取得します。</summary>
		public IQiSession Session { get; }

		/// <summary>このサービスが初期化済みであるかを取得します。</summary>
		public bool IsInitialized { get; private set; }

		/// <summary>このサービスの初期化が完了すると発生します。</summary>
		public event EventHandler Initialized;

");
            
            #line 89 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"

	foreach (var mInfo in MethodInfos)
    {

            
            #line default
            #line hidden
            this.Write("        /// <summary>");
            
            #line 93 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.Description));
            
            #line default
            #line hidden
            this.Write("</summary>\r\n");
            
            #line 94 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
 
		for (int i = 0;i < mInfo.ArgumentCount; i++)
        {

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 98 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetArgumentXmlDocumentComment(mInfo.ArgumentNames[i], mInfo.ArgumentDescriptions[i])));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 99 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"

		}

            
            #line default
            #line hidden
            this.Write("\t\t/// <returns>");
            
            #line 102 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ReturnDescription));
            
            #line default
            #line hidden
            this.Write("</returns>\r\n        public ");
            
            #line 103 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ReturnValueSignature));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 103 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.MethodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 103 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ArgumentDeclaration));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            ");
            
            #line 105 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ReturnExpression));
            
            #line default
            #line hidden
            this.Write("SourceService[\"");
            
            #line 105 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.OriginalMethodName));
            
            #line default
            #line hidden
            this.Write("\"].Call");
            
            #line 105 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.CallTypeTemplateOrEmpty));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 105 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ArgumentUsage));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>");
            
            #line 108 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.Description));
            
            #line default
            #line hidden
            this.Write("</summary>\r\n");
            
            #line 109 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
 
		for (int i = 0;i < mInfo.ArgumentCount; i++)
        {

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 113 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetArgumentXmlDocumentComment(mInfo.ArgumentNames[i], mInfo.ArgumentDescriptions[i])));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 114 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"

		}

            
            #line default
            #line hidden
            this.Write("\t\t/// <returns>");
            
            #line 117 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ReturnDescription));
            
            #line default
            #line hidden
            this.Write("</returns>\r\n        public IQiFuture");
            
            #line 118 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.CallTypeTemplateOrEmpty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 118 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.AsyncMethodName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 118 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ArgumentDeclaration));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            return SourceService[\"");
            
            #line 120 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.OriginalMethodName));
            
            #line default
            #line hidden
            this.Write("\"].CallAsync");
            
            #line 120 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.CallTypeTemplateOrEmpty));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 120 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mInfo.ArgumentUsage));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n");
            
            #line 123 "C:\Users\style\Documents\GitHub\BakuLibQiDotNet\Baku.LibqiDotNet\Baku.LibqiDotNet.ServiceCodeGenerator\QiServiceTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class QiServiceTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
